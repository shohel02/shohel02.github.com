---
layout: post
title: Comparison-of-security-credentials-between-Amazon-EC2-and-Openstack
---

h1. {{ page.title }}

p(meta). 02 May 2011 - Helsinki

<notextile>
<P STYLE="margin-bottom: 0in"><FONT SIZE=4><B>Comparison of security
features and credentials between  Amazon cloud services and Openstack</B></FONT></P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in">Recently, Amazon offered a free tier
usage policy for Amazon cloud ( in other words <A HREF="http://aws.amazon.com/">Amazon
EC2</A>). In the mean time, I was doing some research on <A HREF="http://www.openstack.org/">Openstack</A>,
an open source cloud platform, which is in some way derivative of
Amazon and Rackspace model. In the Rackspace site, there is a good
business comparison between the AWS and Rackspace cloud <A HREF="http://www.rackspace.com/cloud/cloud_hosting_products/servers/compare/">High
level comparison of Amazon EC2 and Rackspace </A>.  However, there is
a lack of comparison analysis documentation in the mirco level. This
motivates me to share my findings regarding credentials for both 
Amazon EC2 and Openstack. 
</P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in"><FONT SIZE=3><B>1 Initiation of Cloud
account:</B></FONT></P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in">1.1 Openstack:</P>
<P STYLE="margin-bottom: 0in">Openstack requires creating an Admin
account using <A HREF="http://nova.openstack.org/runnova/nova.manage.html">nova-manage</A>
before running services in the cloud. In turn, the account is tagged
with a project in which the account holder has total control (in
project manager role).  In openstack, nova-manage uses local method
call to create accounts and projects.  The command is used to set the
EUCA access key and secret key for the account.</P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in">Example calls:</P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in">#create an admin account with id –
admin, access key – admin, secret key - admin 
</P>
<P STYLE="margin-bottom: 0in">$NOVA_DIR/bin/nova-manage user admin
admin admin admin 
</P>
<P STYLE="margin-bottom: 0in"> # create a project called 'admin' with
project manager of 'admin' 
</P>
<P STYLE="margin-bottom: 0in">$NOVA_DIR/bin/nova-manage project
create admin admin</P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in">1.2  Amazon EC2:</P>
<P STYLE="margin-bottom: 0in">Amazon web service uses GUI interface
to create user account. After validating your account details and
credit card numbers your account is up and running. With the creation
of account you also receive an account number. I have not found the
underlying details about account creation.</P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in"><B>2. Sign-in to GUI management
console:</B></P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in">2.1 Openstack:</P>
<P STYLE="margin-bottom: 0in">Openstack provides a web interface,
named <A HREF="https://launchpad.net/openstack-dashboard">dashboard</A>,
for credentials and cloud services. The web interface is developed
using python based django framework. The dashboard is a separate
entity in openstack platform which uses REST based EC2 api to call
openstack API server. This means, dashboard maintains its own user
identity mechanism which is separate from Openstack identity
management system. Users need a dashboard account (user
name/password) to access the dashboard.  The users also need to setup
EC2 access key and EC2 secret key of a particular account to access
Openstack api server.</P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in">( deployment issue: ?? means an an
account admin will setup the dashboard locally with his EC2 access or
secret key or the cloud provide initializes dash with account
details. )</P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in">2.2 Amazon Management console</P>
<OL START=2>
	<OL START=2>
		<P STYLE="margin-bottom: 0in">Amazon provides a web based
		<A HREF="https://console.aws.amazon.com/s3/home">management console</A>
		for managing Amazon cloud services. Using the management console
		you can do almost all cloud management tasks such as creating new
		key pairs, management of instances, object storage, elastic IP and
		so on.  User name/password with Multi-factor authentication (MFA)
		or only user name/password is used to login AWS management console.
		The usage of MFA enables second authentication channel to access
		the management console.</P>
		<P STYLE="margin-bottom: 0in">   
		</P>
	</OL>
</OL>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in"><B>3.    Running Instances:</B></P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in">3.1 Openstack:</P>
<P STYLE="margin-bottom: 0in">Openstack requires a bundled image
before running an instance.  The bundling process uses your X.509
certificate (cert.pem), private key of the certificate (pk.pem), and
NOVA CA certificate (cacert.pem) to identify the instance to Nova
Compute.  Before running an instance, you need to create an SSH
keypair. The SSH key pair allows access to the running instance. The
key pair can be created with the following commands :</P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in">&gt; euca-add-keypair mykey &gt;
mykey.pem</P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in">This command creates a key pair,
uploads the public key to your cloud account, and stores the private
key to your machine. 
</P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in">&gt; euca-run-instanaces -k mykey -t
m1.tiny ami-tty</P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in">This command  injects public key of
mykey to the instance. This allows the user with corresponding
private key to access the running instance.  For example,</P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in">&gt; ssh -i mykey <A HREF="mailto:ubuntu@10.0.0.3">ubuntu@10.0.0.3</A>
(assuming the instance is running at IP 10.0.0.3) 
</P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in">3.2 Amazon EC2:</P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in">The process is similar to Openstack.
Amazon uses <A HREF="http://aws.amazon.com/search?_encoding=UTF8&amp;searchQuery=EC2-tools">EC2-tools</A>
for starting an instance. On the other hand,  <A HREF="http://open.eucalyptus.com/wiki/Euca2oolsGuide_v1.1">Euca-tools</A>
which is developed by Eucalyptus supports both Eucalyptus and Amazon
EC2 cloud. Openstack has also incorporated support of EUCA APIs. Both
the Euca-tools and the EC2-tools follow similar working principle.
The small difference between the Euca-tools and the EC2-tools are :
EC2-tools only uses x.509 certificate as user credentials while
Euca-tools uses (depends on the command) both EC2 Access key / Secret
key and X.509 certificate as user credentials.</P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in"><B>4. Managing cloud though EC2 / EUCA
tools:</B></P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in">Both, EC2-tools from Amazon and EUCA
tools from Eucalyptus, can be used for cloud management . These
include image bundling, instance creation, key pair creation, and so
on. 
</P>
<P STYLE="margin-bottom: 0in">  
</P>
<P STYLE="margin-bottom: 0in"><B>5. Creating new users within a cloud
account:</B></P>
<OL START=4>
	<OL>
		<P STYLE="margin-bottom: 0in"></P>
	</OL>
</OL>
<P STYLE="margin-bottom: 0in">5.1 Openstack: 
</P>
<P STYLE="margin-bottom: 0in">Nova-manage is used to create an user
account in Openstack. The user account is attached to an existing
project or a new project. Creation of user also depends on your role
– an project administrator can manage user within his project. On
the other hand, he cannot manage user beyond his project. However,
one shortcomings of Openstack is that - user creation process is
based on local method (i.e., nova-manage). This means web based
interface – for example, Openstack dashboard – can not be used
for user management. Currently, Openstack dashboard registers new
user only 
</P>
<P STYLE="margin-bottom: 0in">to the dashboard not in Openstack
authentication server. This can be one of the areas of Openstack to
include account management though REST API.  
</P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in">5.2 Amazon EC2:</P>
<P STYLE="margin-bottom: 0in">Amazon provides <A HREF="http://aws.amazon.com/search?_encoding=UTF8&amp;searchQuery=IAM">AWS
Identity and Access Management (IAM) Service</A> for creating and
managing users within your AWS account.  IAM allows cloud
administrator of an AWS account holder to manage users remotely. IAM
uses user's EC2 access key / secret key combination to identity users
to the AWS.</P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in"><B>6. Back end support for Identity
module:</B></P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in">6.1  Openstack:</P>
<P STYLE="margin-bottom: 0in">Openstack stores security credentials
in databases – by default comes with MySql and Sqlite support.
There is a fake driver for active directory support – however the
actual implementation is still missing.</P>
<P STYLE="margin-bottom: 0in">            
</P>
<P STYLE="margin-bottom: 0in">6.2 Amazon EC2:</P>
<P STYLE="margin-bottom: 0in">            Information will be
provided later.</P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in"><B>7. Access control in the Cloud:</B></P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in">7.1  Openstack:</P>
<P STYLE="margin-bottom: 0in">Openstack uses <B>RBAC</B> model for
user's access to the cloud. In RBAC model, each role controls the API
access level of the user. The users permission in a project depends
on the intersection of both his global role and project role.
Openstack defines five roles for the user. These are :</P>
<P STYLE="margin-bottom: 0in"> 
</P>
<P STYLE="margin-bottom: 0in"><STRONG>Cloud Administrator.</STRONG>
(admin), <STRONG>IT Security.</STRONG> (itsec), <STRONG>Project
Manager.</STRONG> (projectmanager), <STRONG>Network Administrator.</STRONG>
(netadmin) , and <STRONG>Developer.</STRONG></P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in"><STRONG><SPAN STYLE="font-weight: normal">7.2
Amazon EC2:</SPAN></STRONG></P>
<P STYLE="margin-bottom: 0in"><STRONG><FONT SIZE=3><SPAN STYLE="font-weight: normal">Through
<A HREF="http://aws.amazon.com/search?_encoding=UTF8&amp;searchQuery=IAM">AWS
Identity and Access Management (IAM) Service</A>, administrator can
control level of  permission of each user. The permission to each
user is provided in a granular level using a policy document. The
admin uploads a policy document for each user based on the user
requirement. </SPAN></FONT></STRONG>
</P>
<P STYLE="margin-bottom: 0in"><STRONG>            </STRONG>
</P>
<P STYLE="margin-bottom: 0in"><B>8.  Tools provided to control user
management:</B></P>
<P STYLE="margin-bottom: 0in">  
</P>
<P STYLE="margin-bottom: 0in">Openstack provides nova-manage for user
and account management</P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in">Amazon EC2 provides <B> </B><STRONG><FONT SIZE=3><SPAN STYLE="font-weight: normal"><A HREF="http://aws.amazon.com/search?_encoding=UTF8&amp;searchQuery=IAM">AWS
Identity and Access Management (IAM) Service</A> for user and account
management. </SPAN></FONT></STRONG>
</P>
<P STYLE="margin-bottom: 0in">         
</P>
<P STYLE="margin-bottom: 0in"><B>9. Security groups:</B></P>
<OL START=9>
	<P STYLE="margin-bottom: 0in"></P>
</OL>
<P STYLE="margin-bottom: 0in">Security groups provides ingress
filtering rules for Openstack. It acts similar to firewall rules (ip
tables) in the cloud context.  A security group without any rules
will block all incoming traffic. However, it only blocks incoming
traffic, not the outgoing traffic.  New rules are automatically
enforced for all running instances and newly run instances. 
</P>
<P STYLE="margin-bottom: 0in">     
</P>
<P STYLE="margin-bottom: 0in">EUCA commands for creating a security
group: 
</P>
<P STYLE="margin-bottom: 0in">&gt; euca-add-group -d “security-group”</P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in">Add a new rule to a security group:</P>
<P STYLE="margin-bottom: 0in">&gt; euca-authorize -P tcp -s
172.169.0.2 -p 22 security-group</P>
<P STYLE="margin-bottom: 0in">                 
</P>
<P STYLE="margin-bottom: 0in">Delete a security group:</P>
<P STYLE="margin-bottom: 0in">&gt;euca-delete-group security-group</P>
<P STYLE="margin-bottom: 0in"><BR>
</P>
<P STYLE="margin-bottom: 0in"><B>10. Certificate Authority:</B></P>
<OL START=10>
	<P STYLE="margin-bottom: 0in"></P>
</OL>
<P STYLE="margin-bottom: 0in">Openstack uses certificates for
bundling, unbundling of images and creating VPN connection with the
project VPNs.  These certificates are self signed certificate for
Openstack. I will cover this topic in details later in another post.</P>

</notextile>

h2. Next plan 

Next, we will cover source code flow of security checkpoints in Openstack.

